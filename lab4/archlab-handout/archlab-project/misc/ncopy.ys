################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 栾佑宇 2300013113
# Describe how and why you modified the baseline code.
# 使用iopq代替irmmovq和opq的组合, 减少一个周期
# 注释掉了xorq %rax,%rax(%rax初始即为0)
# 使用了循环展开和预读数据
# 使用了三叉搜索树优化了余数判断, 测试数据是从1-64的长度, 余数0~9出现的次数分别为6,7,7,7,6,6,6,6,6, 构建树如下
# #(0(1,2,#),3,#(#(4,5,#),6,#(7,8,9)))
# 将余数数据读取与判断按余数倒序安排，减少JX指令
################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
	# Loop header
	# xorq %rax,%rax		# count = 0;
	isubq $10, %rdx				
	jl Root		# if len <= 10, goto Root

# 提前读取9个数据到寄存器中
Read_num:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp

# 十路循环展开, 将数据存储到dst中, 并判断读取的数据是否大于0, 大于0则count++, 小于0则直接进入下一个数据判断
Loop0:	
	andq %r8, %r8
	rmmovq %r8, (%rsi)	# store it to dst
	jle Loop1
	iaddq $1, %rax	

Loop1:	
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)	# store it to dst
	jle Loop2
	iaddq $1, %rax	

Loop2:	
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)	# store it to dst
	jle Loop3
	iaddq $1, %rax

Loop3:	
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)	# store it to dst
	jle Loop4
	iaddq $1, %rax

Loop4:	
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)	# store it to dst
	jle Loop5
	iaddq $1, %rax

Loop5:	
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)	# store it to dst
	jle Loop6
	iaddq $1, %rax

Loop6:	
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)	# store it to dst
	jle Loop7
	iaddq $1, %rax

Loop7:	
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)	# store it to dst
	jle Loop8
	iaddq $1, %rax

Loop8:	
	andq %rbx, %rbx
	rmmovq %rbx, 64(%rsi)	# store it to dst
	jle Loop9
	iaddq $1, %rax

Loop9:	
	andq %rbp, %rbp
	rmmovq %rbp, 72(%rsi)	# store it to dst
	jle Npos
	iaddq $1, %rax

Npos:		
	iaddq $80, %rdi		# src +=10
	iaddq $80, %rsi		# dst +=10
	isubq $10, %rdx		# len -=10
	jge Read_num		# if len >= 0, goto Read_num

# 搜索树根
Root:
	iaddq $7, %rdx		# len - 3
	jl Left				# len < 3
	jg Right			# len > 3
	je Remain3			# len == 3
	
Left:
	iaddq $2, %rdx		# len == 1
	je Remain1
	isubq $1, %rdx		# len == 2
	je Remain2
	jmp Done			# len == 0, 将0放在左子树最后特判, 因为可以直接Done从而节省指令数

Right:
	isubq $3, %rdx		# len - 6 
	jg Right2Right		# len > 6
	je Remain6			# len == 6
	iaddq $1, %rdx		# Right2Left, len - 5
	je Remain5			# len == 5
	jmp Remain4			# len == 4
	
Right2Right:
	isubq $2,%rdx		# len - 8
	jl Remain7			# len < 8, 实际上len == 7, 因为6 < len < 8
	je Remain8			# len == 8

# 不属于上述全部情况, 即len == 9
Remain9:
	mrmovq 64(%rdi), %r8	
	rmmovq %r8, 64(%rsi)
	andq %r8, %r8		# val <= 0?

# 把条件跳转包括%rax++的两条指令放到下一组操作的两条内存操作指令中间, 利用bubble
Remain8:
	mrmovq 56(%rdi), %r8	
	jle Remain8a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain8a:	
	rmmovq %r8, 56(%rsi)
	andq %r8, %r8		# val <= 0?

Remain7:
	mrmovq 48(%rdi), %r8	
	jle Remain7a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain7a:		
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8		# val <= 0?

Remain6:
	mrmovq 40(%rdi), %r8	
	jle Remain6a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain6a:		
	rmmovq %r8, 40(%rsi)
	andq %r8, %r8		# val <= 0?

Remain5:
	mrmovq 32(%rdi), %r8	
	jle Remain5a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain5a:
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8		# val <= 0?

Remain4:
	mrmovq 24(%rdi), %r8	
	jle Remain4a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain4a:
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8		# val <= 0?

Remain3:
	mrmovq 16(%rdi), %r8	
	jle Remain3a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain3a:
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8		# val <= 0?

Remain2:
	mrmovq 8(%rdi), %r8	
	jle Remain2a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain2a:
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8		# val <= 0?

Remain1:
	mrmovq (%rdi), %r8	
	jle Remain1a		# val <= 0 -> 直接判断下一个数
	iaddq $1, %rax		# 否则 count++

Remain1a:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Done			# val <= 0 -> Done
	iaddq $1, %rax		# 否则 count++

Done:
	ret

# In grader, we will add a "trap: jmp trap" here, which traps your program in an
# infinite loop. Thus your function should always return instead of falling
# through till the end of the source code :)